/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreateInstruction,
  type ParsedIncrementInstruction,
} from '../instructions';
import { Key, getKeyEncoder } from '../types';

export const SOL_MTREE_PROGRAM_ADDRESS =
  '5btvfbzMrGv3WB4h47NXpophMLKqGEEDwGDQgkr8PMF2' as Address<'5btvfbzMrGv3WB4h47NXpophMLKqGEEDwGDQgkr8PMF2'>;

export enum SolMtreeAccount {
  Counter,
}

export function identifySolMtreeAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SolMtreeAccount {
  const data = 'data' in account ? account.data : account;
  if (containsBytes(data, getKeyEncoder().encode(Key.Counter), 0)) {
    return SolMtreeAccount.Counter;
  }
  throw new Error(
    'The provided account could not be identified as a solMtree account.'
  );
}

export enum SolMtreeInstruction {
  Create,
  Increment,
}

export function identifySolMtreeInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SolMtreeInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return SolMtreeInstruction.Create;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return SolMtreeInstruction.Increment;
  }
  throw new Error(
    'The provided instruction could not be identified as a solMtree instruction.'
  );
}

export type ParsedSolMtreeInstruction<
  TProgram extends string = '5btvfbzMrGv3WB4h47NXpophMLKqGEEDwGDQgkr8PMF2',
> =
  | ({
      instructionType: SolMtreeInstruction.Create;
    } & ParsedCreateInstruction<TProgram>)
  | ({
      instructionType: SolMtreeInstruction.Increment;
    } & ParsedIncrementInstruction<TProgram>);
